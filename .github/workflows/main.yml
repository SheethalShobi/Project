name: Full CI/CD Pipeline with Kubernetes

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ "feature/**", main ]
    tags:
      - 'v*.*.*'
  release:
    types: [published]
 
env:
  K8S_DEV_NAMESPACE: travel-dev
  K8S_PROD_NAMESPACE: travel

jobs:

  # -------------------
  # 1️⃣ CI: Test, Build, Scan, Push Images (Docker Hub)
  # -------------------
  ci-build:
    runs-on: [self-hosted, linux, docker]
    strategy:
      matrix:
        service: [ "travel-frontend", "flights-service", "recommendation-backend", "user-service", "holiday-service" ]
    steps:
      - uses: actions/checkout@v4

      # Install dependencies and run tests
      - name: Run tests
        run: |
          cd ${{ matrix.service }}
          if [ -f "package.json" ]; then
            npm ci
            npm run test || echo "No tests defined"
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
            pytest || echo "No tests defined"
          fi

      # Docker login (Docker Hub)
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build & push Docker images to Docker Hub
      - name: Build & Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:pr-${{ github.run_id }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:dev

      # Scan Docker image
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:dev
          format: table
          exit-code: 0

  # -------------------
  # 2️⃣ Release: Build Stable Images
  # -------------------
  release-build:
    runs-on: [self-hosted, linux, docker]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        service: [ "travel-frontend", "flights-service", "recommendation-backend", "user-service", "holiday-service" ]
    steps:
      - uses: actions/checkout@v4

      # Docker login (Docker Hub)
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build & push stable Docker images
      - name: Build & Push Stable Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:${{ github.ref_name }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}:stable

  # -------------------
  # 3️⃣ Deploy to Dev
  # -------------------
  deploy-dev:
    runs-on: [self-hosted, linux]
    if: github.ref == 'refs/heads/main'
    needs: [ci-build]
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Apply all Kubernetes resources to Dev
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: |
          # ConfigMaps & Secrets
          kubectl apply -f k8s/configmaps/ -n $K8S_DEV_NAMESPACE
          kubectl apply -f k8s/secrets/ -n $K8S_DEV_NAMESPACE

          # Persistent Volumes
          kubectl apply -f k8s/pv/ -n $K8S_DEV_NAMESPACE

          # Deployments & StatefulSets
          kubectl apply -f k8s/deployments/ -n $K8S_DEV_NAMESPACE
          kubectl apply -f k8s/statefulsets/ -n $K8S_DEV_NAMESPACE

          # Services
          kubectl apply -f k8s/services/ -n $K8S_DEV_NAMESPACE

          # Ingress
          kubectl apply -f k8s/ingress/ -n $K8S_DEV_NAMESPACE

          # Horizontal Pod Autoscalers
          kubectl apply -f k8s/hpa/ -n $K8S_DEV_NAMESPACE

          # Network Policies
          kubectl apply -f k8s/networkpolicies/ -n $K8S_DEV_NAMESPACE

  # -------------------
  # 4️⃣ Deploy to Prod
  # -------------------
  deploy-prod:
    runs-on: [self-hosted, linux]
    if: github.event_name == 'release'
    needs: [release-build]
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Apply all Kubernetes resources to Prod
        env:
          KUBECONFIG: /home/runner/.kube/config
        run: |
          kubectl apply -f k8s/configmaps/ -n $K8S_PROD_NAMESPACE
          kubectl apply -f k8s/secrets/ -n $K8S_PROD_NAMESPACE
          kubectl apply -f k8s/pv/ -n $K8S_PROD_NAMESPACE
          kubectl apply -f k8s/deployments/ -n $K8S_PROD_NAMESPACE
          kubectl apply -f k8s/statefulsets/ -n $K8S_PROD_NAMESPACE
          kubectl apply -f k8s/services/ -n $K8S_PROD_NAMESPACE
          kubectl apply -f k8s/ingress/ -n $K8S_PROD_NAMESPACE
          kubectl apply -f k8s/hpa/ -n $K8S_PROD_NAMESPACE
          kubectl apply -f k8s/networkpolicies/ -n $K8S_PROD_NAMESPACE
